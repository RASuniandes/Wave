#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <Adafruit_MPU6050.h>
#include "BNO055_support.h"

Adafruit_BMP280 bmp;
Adafruit_MPU6050 mpu;
struct bno055_t myBNO;
struct bno055_euler myEulerData;

boolean bmpInitialized = false;
boolean mpuInitialized = false;

float temperature = 0.0;
float pressure = 0.0;
float accelerometerX = 0.0;
float accelerometerY = 0.0;
float accelerometerZ = 0.0;
float gyroX = 0.0;
float gyroY = 0.0;
float gyroZ = 0.0;

#define BNO055_SAMPLERATE_DELAY_MS (100)
//BNO 055
//
//struct bno055_t myBNO;
//struct bno055_euler myEulerData; //Structure to hold the Euler data

 
unsigned char accelCalibStatus = 0;     //Variable to hold the calibration status of the Accelerometer
unsigned char magCalibStatus = 0;       //Variable to hold the calibration status of the Magnetometer
unsigned char gyroCalibStatus = 0;      //Variable to hold the calibration status of the Gyroscope
unsigned char sysCalibStatus = 0;       //Variable to hold the calibration status of the System (BNO055's MCU)
unsigned long lastTime = 0;
 
/* Set the delay between fresh samples */




//I2C
#define BNO055_SAMPLERATE_DELAY_MS (100)
int devicesFound = 0;
int I2C_frequency =1000;
int I2C_rate =1000; 
int I2C_frequency_max = 1000000;



void initSensors() {
  bmpInitialized = bmp.begin(0x76);
  mpuInitialized = mpu.begin(0x68);
  BNO_Init(&myBNO);
  bno055_set_operation_mode(OPERATION_MODE_NDOF);
}

void readBMP280Data() {
  temperature = bmp.readTemperature();
  pressure = bmp.readPressure() / 100.0F;
}

void readMPU6050Data() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  accelerometerX = a.acceleration.x;
  accelerometerY = a.acceleration.y;
  accelerometerZ = a.acceleration.z;
  gyroX = g.gyro.x;
  gyroY = g.gyro.y;
  gyroZ = g.gyro.z;
}

void Bno() {
  if (millis() - lastTime >= BNO055_SAMPLERATE_DELAY_MS) {
    lastTime = millis();
    bno055_read_euler_hrp(&myEulerData);
    Serial.print(F("Orientation: "));
    Serial.print(360 - (float(myEulerData.h) / 16.00));
    Serial.print(F(", "));
    Serial.print(360 - (float(myEulerData.p) / 16.00));
    Serial.print(F(", "));
    Serial.print(360 - (float(myEulerData.r) / 16.00));
    Serial.println(F(""));
    bno055_get_accelcalib_status(&accelCalibStatus);
    bno055_get_gyrocalib_status(&gyroCalibStatus);
    bno055_get_syscalib_status(&sysCalibStatus);
    bno055_get_magcalib_status(&magCalibStatus);
    Serial.print(F("Calibration: "));
    Serial.print(sysCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(gyroCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(accelCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(magCalibStatus, DEC);
    Serial.println(F(""));
  }
}

void scanI2C() {
  Serial.println("Scanning I2C Addresses");
  uint8_t cnt = 0;
  
  // Establece la frecuencia del bus I2C a 100 kHz
  Wire.setClock(100000);

  for (uint8_t i = 0; i < 128; i++) {
    Wire.beginTransmission(i);
    uint8_t ec = Wire.endTransmission(true);

    if (ec == 0) {
      if (i < 16) Serial.print('0');
      Serial.print(i, HEX);
      cnt++;
    } else {
      Serial.print("..");
    }
    
    Serial.print(' ');
    if ((i & 0x0F) == 0x0F) Serial.println();
  }

  Serial.print("Scan Completed, ");
  Serial.print(cnt);
  Serial.println(" I2C Devices found.");

  devicesFound = cnt;

  if (devicesFound == 0) {
    Serial.println("No I2C devices found.");
  } else {
    Serial.println("I2C devices found.");
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  scanI2C();
  initSensors();
}

void loop() {
  // Bno(); // Si deseas activar la lectura del BNO055
  readBMP280Data();
  Serial.print("Temperatura (C): ");
  Serial.println(temperature);
  Serial.print("Presión (hPa): ");
  Serial.println(pressure);
  
  readMPU6050Data();
  Serial.print("Acelerómetro (X, Y, Z): ");
  Serial.print(accelerometerX);
  Serial.print(", ");
  Serial.print(accelerometerY);
  Serial.print(", ");
  Serial.println(accelerometerZ);
  Serial.print("Giroscopio (X, Y, Z): ");
  Serial.print(gyroX);
  Serial.print(", ");
  Serial.print(gyroY);
  Serial.print(", ");
  Serial.println(gyroZ);
  
  delay(1000); // Pausa de 1 segundo entre lecturas
}
