
#include "Arduino.h" 

#include "BNO055_support.h"     //Contains the bridge code between the API and Arduino
#include <Wire.h>
 
//The device address is set to BNO055_I2C_ADDR2 in this example. You can change this in the BNO055.h file in the code segment shown below.
// /* bno055 I2C Address */
// #define BNO055_I2C_ADDR1                0x28
// #define BNO055_I2C_ADDR2                0x29
// #define BNO055_I2C_ADDR                 BNO055_I2C_ADDR2
 
//Pin assignments as tested on the Arduino Due.
//Vdd,Vddio : 3.3V
//GND : GND
//SDA/SCL : SDA/SCL
//PSO/PS1 : GND/GND (I2C mode)
 
//This structure contains the details of the BNO055 device that is connected. (Updated after initialization)
struct bno055_t myBNO;
struct bno055_euler myEulerData; //Structure to hold the Euler data
 
unsigned char accelCalibStatus = 0;     //Variable to hold the calibration status of the Accelerometer
unsigned char magCalibStatus = 0;       //Variable to hold the calibration status of the Magnetometer
unsigned char gyroCalibStatus = 0;      //Variable to hold the calibration status of the Gyroscope
unsigned char sysCalibStatus = 0;       //Variable to hold the calibration status of the System (BNO055's MCU)
 
unsigned long lastTime = 0;
 
/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS (100)
 
void setup() //This code is executed once
{
  //Initialize I2C communication
  Wire.begin();
 
  //Initialization of the BNO055
  BNO_Init(&myBNO); //Assigning the structure to hold information about the device
 
  //Configuration to NDoF mode
  bno055_set_operation_mode(OPERATION_MODE_NDOF);
 
  delay(1);
 
  //Initialize the Serial Port to view information on the Serial Monitor
  Serial.begin(115200);
}
 
void loop() //This code is looped forever
{
  if ((millis() - lastTime) >= BNO055_SAMPLERATE_DELAY_MS) //To stream at 10Hz without using additional timers
  {
    lastTime = millis();
 
    bno055_read_euler_hrp(&myEulerData);            //Update Euler data into the structure
 
    /* The WebSerial 3D Model Viewer expects data as heading, pitch, roll */
    Serial.print(F("Orientation: "));
    Serial.print(360-(float(myEulerData.h) / 16.00));
    Serial.print(F(", "));
    Serial.print(360-(float(myEulerData.p) / 16.00));
    Serial.print(F(", "));
    Serial.print(360-(float(myEulerData.r) / 16.00));
    Serial.println(F(""));
 
    bno055_get_accelcalib_status(&accelCalibStatus);
    bno055_get_gyrocalib_status(&gyroCalibStatus);
    bno055_get_syscalib_status(&sysCalibStatus);
    bno055_get_magcalib_status(&magCalibStatus);
 
    Serial.print(F("Calibration: "));
    Serial.print(sysCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(gyroCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(accelCalibStatus, DEC);
    Serial.print(F(", "));
    Serial.print(magCalibStatus, DEC);
    Serial.println(F(""));
 
 
  }
}